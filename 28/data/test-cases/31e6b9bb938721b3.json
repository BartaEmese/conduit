{
  "uid" : "31e6b9bb938721b3",
  "name" : "test_conduit02",
  "fullName" : "testproject.conduit_tc_002_reg_test#test_conduit02",
  "historyId" : "bee41d7ee7186b1d87a775ce0e2f0c80",
  "time" : {
    "start" : 1629057320434,
    "stop" : 1629057333775,
    "duration" : 13341
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\"swal-title\"]\"}\n  (Session info: headless chrome=92.0.4515.131)",
  "statusTrace" : "def test_conduit02():\n        # Conduit_TC_002_Reg\n        # Regiszrtáció helyesen és helytelen adatokkal.\n        # Előfeltételek:\n        # 1- A gazdagép elérhető\n        # 2- A gazdagépen  fut a Conduit\n        # 3- Chrome Verzió: 91.0.4472.77 (Hivatalos verzió) (64 bites)\n        # 4- OS: Windows 10\n        # 5- Szükséges a TC_001 teszt sikeres lefutása\n        # Követelmény: Req.id: R01\n        from selenium import webdriver\n        import time\n        import random\n        import string\n        from selenium.webdriver.chrome.options import Options\n        from webdriver_manager.chrome import ChromeDriverManager\n    \n        options = Options()\n        options.add_argument('--headless')\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)\n    \n        # Oldal betöltése\n        driver.get(\"http://localhost:1667\")\n    \n        # random jelszó\n        def get_ppass(lowers_count, digits_count, uppers_count):\n            lowers = ''.join((random.choice(string.ascii_lowercase) for i in range(lowers_count)))\n            digits = ''.join((random.choice(string.digits) for i in range(digits_count)))\n            uppers = ''.join((random.choice(string.ascii_uppercase) for i in range(uppers_count)))\n            sample_list = list(lowers + digits + uppers)\n            random.shuffle(sample_list)\n            final_string = ''.join(sample_list)\n            return final_string\n    \n        # random felhasználónév\n        def get_uname(lowers_count):\n            lowers = ''.join((random.choice(string.ascii_lowercase) for i in range(lowers_count)))\n            return lowers\n    \n        # random email cím\n        def get_email(lowers_count):\n            lowers = ''.join((random.choice(string.ascii_lowercase) for i in range(lowers_count)))\n            emails = lowers + \"\" + \"@example.com\"\n            return emails\n    \n        # elemek kikeresése xpath alapján\n        def find_and_by_xpath(xpath_1):\n            element = driver.find_element_by_xpath(xpath_1)\n            return element\n    \n        # Tesztadatok\n        username_value = [\"a\", get_uname(8)]\n        email_value = [\"a\", get_email(8)]\n        password_value = [\"a\", get_ppass(3, 4, 1)]\n    \n        # Regisztráció függvény\n        def registration(username_v, email_v, password_v):\n            user_name = find_and_by_xpath('//input[@placeholder=\"Username\"]')\n            user_name.send_keys(username_v)\n            username_list.append(user_name.get_attribute('value'))\n            email = find_and_by_xpath('//input[@placeholder=\"Email\"]')\n            email.send_keys(email_v)\n            password = find_and_by_xpath('//input[@placeholder=\"Password\"]')\n            password.send_keys(password_v)\n            time.sleep(2)\n            find_and_by_xpath('//button[@class=\"btn btn-lg btn-primary pull-xs-right\"]').click()\n            time.sleep(2)\n    \n        # Alert gomb megnyomás függvény\n        def alert_button_click():\n            alert_button = find_and_by_xpath('//button[@class=\"swal-button swal-button--confirm\"]')\n            alert_button.click()\n            time.sleep(1)\n    \n        # Sign up link kikeresése és klikkekése\n        sign_up = find_and_by_xpath(\"//a[@href='#/register']\")\n        time.sleep(1)\n        sign_up.click()\n        time.sleep(1)\n    \n        # Input mezők megjelenésének ellenőrzése\n        assert find_and_by_xpath('//input[@placeholder=\"Username\"]').is_displayed()\n        assert find_and_by_xpath('//input[@placeholder=\"Email\"]').is_displayed()\n        assert find_and_by_xpath('//input[@placeholder=\"Password\"]').is_displayed()\n    \n        # Username tesztadatok kigyűjtése az ellenőrzéshez\n        username_list = []\n    \n        # Regisztrációs függvény meghívása helytelen tesztadatokkal\n        registration(username_value[0], email_value[0], password_value[0])\n    \n        # Ellenőrizzük, a felugró ablak helyességét\n        assert find_and_by_xpath('//div[@class=\"swal-title\"]').text == \"Registration failed!\"\n        assert find_and_by_xpath('//div[@class=\"swal-text\"]').text == \"Email must be a valid email.\"\n    \n        # Alert gomb megnyomása függvény meghívása\n        alert_button_click()\n    \n        # Regisztrációs függvény meghívása helyes tesztadatokkal\n        registration(username_value[1], email_value[1], password_value[1])\n    \n        # Ellenőrizzük, a felugró ablak helyességét\n>       assert find_and_by_xpath('//div[@class=\"swal-title\"]').text == \"Welcome!\"\n\ntestproject/conduit_tc_002_reg_test.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestproject/conduit_tc_002_reg_test.py:48: in find_and_by_xpath\n    element = driver.find_element_by_xpath(xpath_1)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:394: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7944972ac0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...wn>\\\\n#15 0x564f1810be58 \\\\u003Cunknown>\\\\n#16 0x564f18125dfd \\\\u003Cunknown>\\\\n#17 0x7fa61b620609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\"swal-title\"]\"}\nE         (Session info: headless chrome=92.0.4515.131)\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: NoSuchElementException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\"swal-title\"]\"}\n  (Session info: headless chrome=92.0.4515.131)",
    "statusTrace" : "def test_conduit02():\n        # Conduit_TC_002_Reg\n        # Regiszrtáció helyesen és helytelen adatokkal.\n        # Előfeltételek:\n        # 1- A gazdagép elérhető\n        # 2- A gazdagépen  fut a Conduit\n        # 3- Chrome Verzió: 91.0.4472.77 (Hivatalos verzió) (64 bites)\n        # 4- OS: Windows 10\n        # 5- Szükséges a TC_001 teszt sikeres lefutása\n        # Követelmény: Req.id: R01\n        from selenium import webdriver\n        import time\n        import random\n        import string\n        from selenium.webdriver.chrome.options import Options\n        from webdriver_manager.chrome import ChromeDriverManager\n    \n        options = Options()\n        options.add_argument('--headless')\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)\n    \n        # Oldal betöltése\n        driver.get(\"http://localhost:1667\")\n    \n        # random jelszó\n        def get_ppass(lowers_count, digits_count, uppers_count):\n            lowers = ''.join((random.choice(string.ascii_lowercase) for i in range(lowers_count)))\n            digits = ''.join((random.choice(string.digits) for i in range(digits_count)))\n            uppers = ''.join((random.choice(string.ascii_uppercase) for i in range(uppers_count)))\n            sample_list = list(lowers + digits + uppers)\n            random.shuffle(sample_list)\n            final_string = ''.join(sample_list)\n            return final_string\n    \n        # random felhasználónév\n        def get_uname(lowers_count):\n            lowers = ''.join((random.choice(string.ascii_lowercase) for i in range(lowers_count)))\n            return lowers\n    \n        # random email cím\n        def get_email(lowers_count):\n            lowers = ''.join((random.choice(string.ascii_lowercase) for i in range(lowers_count)))\n            emails = lowers + \"\" + \"@example.com\"\n            return emails\n    \n        # elemek kikeresése xpath alapján\n        def find_and_by_xpath(xpath_1):\n            element = driver.find_element_by_xpath(xpath_1)\n            return element\n    \n        # Tesztadatok\n        username_value = [\"a\", get_uname(8)]\n        email_value = [\"a\", get_email(8)]\n        password_value = [\"a\", get_ppass(3, 4, 1)]\n    \n        # Regisztráció függvény\n        def registration(username_v, email_v, password_v):\n            user_name = find_and_by_xpath('//input[@placeholder=\"Username\"]')\n            user_name.send_keys(username_v)\n            username_list.append(user_name.get_attribute('value'))\n            email = find_and_by_xpath('//input[@placeholder=\"Email\"]')\n            email.send_keys(email_v)\n            password = find_and_by_xpath('//input[@placeholder=\"Password\"]')\n            password.send_keys(password_v)\n            time.sleep(2)\n            find_and_by_xpath('//button[@class=\"btn btn-lg btn-primary pull-xs-right\"]').click()\n            time.sleep(2)\n    \n        # Alert gomb megnyomás függvény\n        def alert_button_click():\n            alert_button = find_and_by_xpath('//button[@class=\"swal-button swal-button--confirm\"]')\n            alert_button.click()\n            time.sleep(1)\n    \n        # Sign up link kikeresése és klikkekése\n        sign_up = find_and_by_xpath(\"//a[@href='#/register']\")\n        time.sleep(1)\n        sign_up.click()\n        time.sleep(1)\n    \n        # Input mezők megjelenésének ellenőrzése\n        assert find_and_by_xpath('//input[@placeholder=\"Username\"]').is_displayed()\n        assert find_and_by_xpath('//input[@placeholder=\"Email\"]').is_displayed()\n        assert find_and_by_xpath('//input[@placeholder=\"Password\"]').is_displayed()\n    \n        # Username tesztadatok kigyűjtése az ellenőrzéshez\n        username_list = []\n    \n        # Regisztrációs függvény meghívása helytelen tesztadatokkal\n        registration(username_value[0], email_value[0], password_value[0])\n    \n        # Ellenőrizzük, a felugró ablak helyességét\n        assert find_and_by_xpath('//div[@class=\"swal-title\"]').text == \"Registration failed!\"\n        assert find_and_by_xpath('//div[@class=\"swal-text\"]').text == \"Email must be a valid email.\"\n    \n        # Alert gomb megnyomása függvény meghívása\n        alert_button_click()\n    \n        # Regisztrációs függvény meghívása helyes tesztadatokkal\n        registration(username_value[1], email_value[1], password_value[1])\n    \n        # Ellenőrizzük, a felugró ablak helyességét\n>       assert find_and_by_xpath('//div[@class=\"swal-title\"]').text == \"Welcome!\"\n\ntestproject/conduit_tc_002_reg_test.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestproject/conduit_tc_002_reg_test.py:48: in find_and_by_xpath\n    element = driver.find_element_by_xpath(xpath_1)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:394: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7944972ac0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...wn>\\\\n#15 0x564f1810be58 \\\\u003Cunknown>\\\\n#16 0x564f18125dfd \\\\u003Cunknown>\\\\n#17 0x7fa61b620609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\"swal-title\"]\"}\nE         (Session info: headless chrome=92.0.4515.131)\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: NoSuchElementException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9705f6bc63b6d7b2",
      "name" : "log",
      "source" : "9705f6bc63b6d7b2.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "fb497181431f6000",
      "name" : "stderr",
      "source" : "fb497181431f6000.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testproject"
  }, {
    "name" : "suite",
    "value" : "conduit_tc_002_reg_test"
  }, {
    "name" : "host",
    "value" : "fv-az77-600"
  }, {
    "name" : "thread",
    "value" : "3739-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testproject.conduit_tc_002_reg_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 8,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 8
      },
      "items" : [ {
        "uid" : "7661c8a197bb80a9",
        "reportUrl" : "https://BartaEmese.github.io/conduit/26//#testresult/7661c8a197bb80a9",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)",
        "time" : {
          "start" : 1629056948068,
          "stop" : 1629056949064,
          "duration" : 996
        }
      }, {
        "uid" : "b26dba8fbef86eaa",
        "reportUrl" : "https://BartaEmese.github.io/conduit/27//#testresult/b26dba8fbef86eaa",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\"swal-title\"]\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1629056324542,
          "stop" : 1629056340067,
          "duration" : 15525
        }
      }, {
        "uid" : "12dc716bd3192512",
        "reportUrl" : "https://BartaEmese.github.io/conduit/26//#testresult/12dc716bd3192512",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)",
        "time" : {
          "start" : 1629056262123,
          "stop" : 1629056264040,
          "duration" : 1917
        }
      }, {
        "uid" : "a459e3372dfca788",
        "reportUrl" : "https://BartaEmese.github.io/conduit/25//#testresult/a459e3372dfca788",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)",
        "time" : {
          "start" : 1629055834131,
          "stop" : 1629055835217,
          "duration" : 1086
        }
      }, {
        "uid" : "e3b48ebf2a4bfdde",
        "reportUrl" : "https://BartaEmese.github.io/conduit/24//#testresult/e3b48ebf2a4bfdde",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\"swal-title\"]\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1629054866540,
          "stop" : 1629054880997,
          "duration" : 14457
        }
      }, {
        "uid" : "2435dcd2bfc38b1",
        "reportUrl" : "https://BartaEmese.github.io/conduit/23//#testresult/2435dcd2bfc38b1",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class=\"swal-title\"]\"}\n  (Session info: headless chrome=92.0.4515.131)",
        "time" : {
          "start" : 1629054082527,
          "stop" : 1629054096021,
          "duration" : 13494
        }
      }, {
        "uid" : "a8743f5fcc7990b5",
        "reportUrl" : "https://BartaEmese.github.io/conduit/22//#testresult/a8743f5fcc7990b5",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)",
        "time" : {
          "start" : 1629053650849,
          "stop" : 1629053652038,
          "duration" : 1189
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "31e6b9bb938721b3.json",
  "parameterValues" : [ ]
}