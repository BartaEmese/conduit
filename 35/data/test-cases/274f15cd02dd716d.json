{
  "uid" : "274f15cd02dd716d",
  "name" : "test_conduit19",
  "fullName" : "testproject.conduit_tc_019-reg_test#test_conduit19",
  "historyId" : "a280ec2078933dfc197dd7f7247e2a2e",
  "time" : {
    "start" : 1629105649416,
    "stop" : 1629105651278,
    "duration" : 1862
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)",
  "statusTrace" : "def test_conduit19():\n        # Conduit_TC_019_Reg\n        # Egy oldalon megjelenő maximális blogbejegyzés vizsgálata\n        # Előfeltételek:\n        # 1- A gazdagép elérhető\n        # 2- A gazdagépen  fut a Conduit\n        # 3- Chrome Verzió: 91.0.4472.77 (Hivatalos verzió) (64 bites)\n        # 4- OS: Windows 10\n        # 5- Bejelentkezett felhasználó: Email: testuser1@example.com Password: Abcd123$\n        # 6- Szükséges a TC_001 és a TC_002 teszt sikeres lefutása\n        # Követelmény: Req.id: R08\n        from selenium import webdriver\n        import time\n        from selenium.webdriver.chrome.options import Options\n        from webdriver_manager.chrome import ChromeDriverManager\n    \n        options = Options()\n        #options.add_argument('--headless')\n    \n>       driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)\n\ntestproject/conduit_tc_019-reg_test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:76: in __init__\n    RemoteWebDriver.__init__(\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0571f0190>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...wn>\\\\n#14 0x55e399f35e58 \\\\u003Cunknown>\\\\n#15 0x55e399f4fdfd \\\\u003Cunknown>\\\\n#16 0x7faf51230609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)",
    "statusTrace" : "def test_conduit19():\n        # Conduit_TC_019_Reg\n        # Egy oldalon megjelenő maximális blogbejegyzés vizsgálata\n        # Előfeltételek:\n        # 1- A gazdagép elérhető\n        # 2- A gazdagépen  fut a Conduit\n        # 3- Chrome Verzió: 91.0.4472.77 (Hivatalos verzió) (64 bites)\n        # 4- OS: Windows 10\n        # 5- Bejelentkezett felhasználó: Email: testuser1@example.com Password: Abcd123$\n        # 6- Szükséges a TC_001 és a TC_002 teszt sikeres lefutása\n        # Követelmény: Req.id: R08\n        from selenium import webdriver\n        import time\n        from selenium.webdriver.chrome.options import Options\n        from webdriver_manager.chrome import ChromeDriverManager\n    \n        options = Options()\n        #options.add_argument('--headless')\n    \n>       driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)\n\ntestproject/conduit_tc_019-reg_test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/chrome/webdriver.py:76: in __init__\n    RemoteWebDriver.__init__(\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc0571f0190>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...wn>\\\\n#14 0x55e399f35e58 \\\\u003Cunknown>\\\\n#15 0x55e399f4fdfd \\\\u003Cunknown>\\\\n#16 0x7faf51230609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: WebDriverException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1fe2ce4a6daffd62",
      "name" : "log",
      "source" : "1fe2ce4a6daffd62.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "dca4648ee2d49dff",
      "name" : "stderr",
      "source" : "dca4648ee2d49dff.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testproject"
  }, {
    "name" : "suite",
    "value" : "conduit_tc_019-reg_test"
  }, {
    "name" : "host",
    "value" : "fv-az39-798"
  }, {
    "name" : "thread",
    "value" : "3704-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testproject.conduit_tc_019-reg_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 11,
        "unknown" : 0,
        "total" : 15
      },
      "items" : [ {
        "uid" : "78ceb02fc819c2c6",
        "reportUrl" : "https://BartaEmese.github.io/conduit/34//#testresult/78ceb02fc819c2c6",
        "status" : "passed",
        "time" : {
          "start" : 1629105353697,
          "stop" : 1629105364510,
          "duration" : 10813
        }
      }, {
        "uid" : "9399d17b5abc6d96",
        "reportUrl" : "https://BartaEmese.github.io/conduit/33//#testresult/9399d17b5abc6d96",
        "status" : "passed",
        "time" : {
          "start" : 1629105322459,
          "stop" : 1629105333318,
          "duration" : 10859
        }
      }, {
        "uid" : "8ef68d0359006f4",
        "reportUrl" : "https://BartaEmese.github.io/conduit/32//#testresult/8ef68d0359006f4",
        "status" : "passed",
        "time" : {
          "start" : 1629105296419,
          "stop" : 1629105307317,
          "duration" : 10898
        }
      }, {
        "uid" : "dca6206047fd5a2a",
        "reportUrl" : "https://BartaEmese.github.io/conduit/31//#testresult/dca6206047fd5a2a",
        "status" : "passed",
        "time" : {
          "start" : 1629105244673,
          "stop" : 1629105255942,
          "duration" : 11269
        }
      }, {
        "uid" : "52b01cd0dad72058",
        "reportUrl" : "https://BartaEmese.github.io/conduit/30//#testresult/52b01cd0dad72058",
        "status" : "passed",
        "time" : {
          "start" : 1629058511257,
          "stop" : 1629058522219,
          "duration" : 10962
        }
      }, {
        "uid" : "bf7ed3f8351d53dd",
        "reportUrl" : "https://BartaEmese.github.io/conduit/29//#testresult/bf7ed3f8351d53dd",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 11 <= 10\n +  where 11 = len([<selenium.webdriver.remote.webelement.WebElement (session=\"9ab10cd01178f7a776be9c487e67f2be\", element=\"a2cee232-fcd1-...belement.WebElement (session=\"9ab10cd01178f7a776be9c487e67f2be\", element=\"8fe5fd38-51a6-42c3-89ae-356cb1e9fb20\")>, ...])",
        "time" : {
          "start" : 1629057900327,
          "stop" : 1629057911348,
          "duration" : 11021
        }
      }, {
        "uid" : "fdd4a4a6a656de4e",
        "reportUrl" : "https://BartaEmese.github.io/conduit/28//#testresult/fdd4a4a6a656de4e",
        "status" : "passed",
        "time" : {
          "start" : 1629057421290,
          "stop" : 1629057432295,
          "duration" : 11005
        }
      }, {
        "uid" : "90176e1a8698a626",
        "reportUrl" : "https://BartaEmese.github.io/conduit/26//#testresult/90176e1a8698a626",
        "status" : "passed",
        "time" : {
          "start" : 1629057033668,
          "stop" : 1629057044539,
          "duration" : 10871
        }
      }, {
        "uid" : "d174329a2a6ee52a",
        "reportUrl" : "https://BartaEmese.github.io/conduit/27//#testresult/d174329a2a6ee52a",
        "status" : "passed",
        "time" : {
          "start" : 1629056426959,
          "stop" : 1629056437954,
          "duration" : 10995
        }
      }, {
        "uid" : "dd5838617840babd",
        "reportUrl" : "https://BartaEmese.github.io/conduit/26//#testresult/dd5838617840babd",
        "status" : "passed",
        "time" : {
          "start" : 1629056350540,
          "stop" : 1629056360473,
          "duration" : 9933
        }
      }, {
        "uid" : "67a7e4caa79a2de5",
        "reportUrl" : "https://BartaEmese.github.io/conduit/25//#testresult/67a7e4caa79a2de5",
        "status" : "passed",
        "time" : {
          "start" : 1629055918186,
          "stop" : 1629055928089,
          "duration" : 9903
        }
      }, {
        "uid" : "19097c060f8ded41",
        "reportUrl" : "https://BartaEmese.github.io/conduit/24//#testresult/19097c060f8ded41",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 11 <= 10\n +  where 11 = len([<selenium.webdriver.remote.webelement.WebElement (session=\"81ad46ea9af34c8c004f106a1e7898fc\", element=\"d15a132f-8cb8-...belement.WebElement (session=\"81ad46ea9af34c8c004f106a1e7898fc\", element=\"ad73d67c-ed76-47c0-87cd-63996c08d24b\")>, ...])",
        "time" : {
          "start" : 1629054967458,
          "stop" : 1629054977427,
          "duration" : 9969
        }
      }, {
        "uid" : "b19e9bf7ccc0cfbb",
        "reportUrl" : "https://BartaEmese.github.io/conduit/23//#testresult/b19e9bf7ccc0cfbb",
        "status" : "passed",
        "time" : {
          "start" : 1629054181892,
          "stop" : 1629054191822,
          "duration" : 9930
        }
      }, {
        "uid" : "8ac87a61991b42bf",
        "reportUrl" : "https://BartaEmese.github.io/conduit/22//#testresult/8ac87a61991b42bf",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)",
        "time" : {
          "start" : 1629053658441,
          "stop" : 1629053658636,
          "duration" : 195
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "274f15cd02dd716d.json",
  "parameterValues" : [ ]
}